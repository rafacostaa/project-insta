{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Count() {\n  _s();\n\n  const end = 70000; //   console.log(end);\n\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n\n  function formatTime(serverTimeinSeconds, elementId) {\n    /* This converts seconds into days, hours, minutes and seconds timestring.\n       Requires JQuery if elementId argument is provided */\n    seconds = Math.floor(Number(serverTimeinSeconds));\n    days = Math.floor(seconds / (24 * 60 * 60));\n    seconds -= Math.floor(days * (24 * 60 * 60));\n    hours = Math.floor(seconds / (60 * 60));\n    seconds -= Math.floor(hours * (60 * 60));\n    minutes = Math.floor(seconds / 60);\n    seconds -= Math.floor(minutes * 60);\n    dDisplay = days > 0 ? days + (days == 1 ? \" day, \" : \" days, \") : \"\";\n    hDisplay = hours > 0 ? hours + (hours == 1 ? \" hour, \" : \" hours, \") : \"\";\n    mDisplay = minutes > 0 ? minutes + (minutes == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    sDisplay = seconds > 0 ? seconds + (seconds == 1 ? \" second\" : \" seconds\") : \"\";\n\n    if (elementId != null) {\n      if (serverTimeinSeconds < 60) {\n        $(elementId).css(\"font-size\", \"15px\");\n        $(elementId).html(sDisplay);\n      }\n\n      if (serverTimeinSeconds >= 60 && serverTimeinSeconds < 3600) {\n        $(elementId).css(\"font-size\", \"15px\");\n        $(elementId).html(mDisplay + sDisplay);\n      }\n\n      if (serverTimeinSeconds >= 3600 && serverTimeinSeconds < 86400) {\n        $(elementId).css(\"font-size\", \"12px\");\n        $(elementId).html(hDisplay + mDisplay + sDisplay);\n      }\n\n      if (serverTimeinSeconds >= 86400 && serverTimeinSeconds !== Infinity) {\n        $(elementId).css(\"font-size\", \"8px\");\n        $(elementId).html(dDisplay + hDisplay + mDisplay + sDisplay);\n      }\n    }\n\n    return dDisplay + hDisplay + mDisplay + sDisplay;\n  } //   setInterval(() => {\n  //     const now = 1;\n  //     const diff = end - now;\n  //     // console.log(diff);\n  //     setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     // setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     // setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //     // setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //   }, 1000);\n\n\n  console.log(formatTime(790968));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [hours, \":\", minutes, \":\", seconds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Count, \"YqMGD5OXkwOFKIyRFtjAnU+Dzzc=\");\n\n_c = Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","Count","end","hours","setHours","minutes","setMinutes","seconds","setSeconds","formatTime","serverTimeinSeconds","elementId","Math","floor","Number","days","dDisplay","hDisplay","mDisplay","sDisplay","$","css","html","Infinity","console","log"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAMC,GAAG,GAAG,KAAZ,CAD8B,CAE9B;;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,EAAlC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,EAAtC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;;AAEA,WAASS,UAAT,CAAoBC,mBAApB,EAAyCC,SAAzC,EAAoD;AAClD;AACJ;AACIJ,IAAAA,OAAO,GAAGK,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACJ,mBAAD,CAAjB,CAAV;AACAK,IAAAA,IAAI,GAAGH,IAAI,CAACC,KAAL,CAAWN,OAAO,IAAI,KAAK,EAAL,GAAU,EAAd,CAAlB,CAAP;AACAA,IAAAA,OAAO,IAAIK,IAAI,CAACC,KAAL,CAAWE,IAAI,IAAI,KAAK,EAAL,GAAU,EAAd,CAAf,CAAX;AACAZ,IAAAA,KAAK,GAAGS,IAAI,CAACC,KAAL,CAAWN,OAAO,IAAI,KAAK,EAAT,CAAlB,CAAR;AACAA,IAAAA,OAAO,IAAIK,IAAI,CAACC,KAAL,CAAWV,KAAK,IAAI,KAAK,EAAT,CAAhB,CAAX;AACAE,IAAAA,OAAO,GAAGO,IAAI,CAACC,KAAL,CAAWN,OAAO,GAAG,EAArB,CAAV;AACAA,IAAAA,OAAO,IAAIK,IAAI,CAACC,KAAL,CAAWR,OAAO,GAAG,EAArB,CAAX;AAEAW,IAAAA,QAAQ,GAAGD,IAAI,GAAG,CAAP,GAAWA,IAAI,IAAIA,IAAI,IAAI,CAAR,GAAY,QAAZ,GAAuB,SAA3B,CAAf,GAAuD,EAAlE;AACAE,IAAAA,QAAQ,GAAGd,KAAK,GAAG,CAAR,GAAYA,KAAK,IAAIA,KAAK,IAAI,CAAT,GAAa,SAAb,GAAyB,UAA7B,CAAjB,GAA4D,EAAvE;AACAe,IAAAA,QAAQ,GACNb,OAAO,GAAG,CAAV,GAAcA,OAAO,IAAIA,OAAO,IAAI,CAAX,GAAe,WAAf,GAA6B,YAAjC,CAArB,GAAsE,EADxE;AAEAc,IAAAA,QAAQ,GACNZ,OAAO,GAAG,CAAV,GAAcA,OAAO,IAAIA,OAAO,IAAI,CAAX,GAAe,SAAf,GAA2B,UAA/B,CAArB,GAAkE,EADpE;;AAGA,QAAII,SAAS,IAAI,IAAjB,EAAuB;AACrB,UAAID,mBAAmB,GAAG,EAA1B,EAA8B;AAC5BU,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaU,GAAb,CAAiB,WAAjB,EAA8B,MAA9B;AACAD,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaW,IAAb,CAAkBH,QAAlB;AACD;;AACD,UAAIT,mBAAmB,IAAI,EAAvB,IAA6BA,mBAAmB,GAAG,IAAvD,EAA6D;AAC3DU,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaU,GAAb,CAAiB,WAAjB,EAA8B,MAA9B;AACAD,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaW,IAAb,CAAkBJ,QAAQ,GAAGC,QAA7B;AACD;;AACD,UAAIT,mBAAmB,IAAI,IAAvB,IAA+BA,mBAAmB,GAAG,KAAzD,EAAgE;AAC9DU,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaU,GAAb,CAAiB,WAAjB,EAA8B,MAA9B;AACAD,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaW,IAAb,CAAkBL,QAAQ,GAAGC,QAAX,GAAsBC,QAAxC;AACD;;AACD,UAAIT,mBAAmB,IAAI,KAAvB,IAAgCA,mBAAmB,KAAKa,QAA5D,EAAsE;AACpEH,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaU,GAAb,CAAiB,WAAjB,EAA8B,KAA9B;AACAD,QAAAA,CAAC,CAACT,SAAD,CAAD,CAAaW,IAAb,CAAkBN,QAAQ,GAAGC,QAAX,GAAsBC,QAAtB,GAAiCC,QAAnD;AACD;AACF;;AACD,WAAOH,QAAQ,GAAGC,QAAX,GAAsBC,QAAtB,GAAiCC,QAAxC;AACD,GA7C6B,CA8C9B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAU,CAAC,MAAD,CAAtB;AACA,sBACE;AAAA,2BAEE;AAAA,iBACGN,KADH,OACWE,OADX,OACqBE,OADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAnEuBN,K;;KAAAA,K","sourcesContent":["import { useState } from \"react\";\n\nexport default function Count() {\n  const end = 70000;\n  //   console.log(end);\n\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n\n  function formatTime(serverTimeinSeconds, elementId) {\n    /* This converts seconds into days, hours, minutes and seconds timestring.\n       Requires JQuery if elementId argument is provided */\n    seconds = Math.floor(Number(serverTimeinSeconds));\n    days = Math.floor(seconds / (24 * 60 * 60));\n    seconds -= Math.floor(days * (24 * 60 * 60));\n    hours = Math.floor(seconds / (60 * 60));\n    seconds -= Math.floor(hours * (60 * 60));\n    minutes = Math.floor(seconds / 60);\n    seconds -= Math.floor(minutes * 60);\n\n    dDisplay = days > 0 ? days + (days == 1 ? \" day, \" : \" days, \") : \"\";\n    hDisplay = hours > 0 ? hours + (hours == 1 ? \" hour, \" : \" hours, \") : \"\";\n    mDisplay =\n      minutes > 0 ? minutes + (minutes == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    sDisplay =\n      seconds > 0 ? seconds + (seconds == 1 ? \" second\" : \" seconds\") : \"\";\n\n    if (elementId != null) {\n      if (serverTimeinSeconds < 60) {\n        $(elementId).css(\"font-size\", \"15px\");\n        $(elementId).html(sDisplay);\n      }\n      if (serverTimeinSeconds >= 60 && serverTimeinSeconds < 3600) {\n        $(elementId).css(\"font-size\", \"15px\");\n        $(elementId).html(mDisplay + sDisplay);\n      }\n      if (serverTimeinSeconds >= 3600 && serverTimeinSeconds < 86400) {\n        $(elementId).css(\"font-size\", \"12px\");\n        $(elementId).html(hDisplay + mDisplay + sDisplay);\n      }\n      if (serverTimeinSeconds >= 86400 && serverTimeinSeconds !== Infinity) {\n        $(elementId).css(\"font-size\", \"8px\");\n        $(elementId).html(dDisplay + hDisplay + mDisplay + sDisplay);\n      }\n    }\n    return dDisplay + hDisplay + mDisplay + sDisplay;\n  }\n  //   setInterval(() => {\n  //     const now = 1;\n  //     const diff = end - now;\n  //     // console.log(diff);\n\n  //     setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     // setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     // setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //     // setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //   }, 1000);\n  console.log(formatTime(790968));\n  return (\n    <div>\n      {/* <h1>{secondsToHms(790968)}</h1> */}\n      <h1>\n        {hours}:{minutes}:{seconds}\n      </h1>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}