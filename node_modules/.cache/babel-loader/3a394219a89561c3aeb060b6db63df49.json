{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Count() {\n  _s();\n\n  const end = new Date(2021, 11, 31).getTime();\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n  setInterval(() => {\n    const now = new Date().getTime();\n    const diff = end - now;\n    setHours(Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)));\n    setMinutes(Math.floor(diff % (1000 * 60 * 60) / (1000 * 60)));\n    setSeconds(Math.floor(diff % (1000 * 60) / 1000));\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: hours\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: minutes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: seconds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Count, \"YqMGD5OXkwOFKIyRFtjAnU+Dzzc=\");\n\n_c = Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","Count","end","Date","getTime","hours","setHours","minutes","setMinutes","seconds","setSeconds","setInterval","now","diff","Math","floor"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAMC,GAAG,GAAG,IAAIC,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,EAAuBC,OAAvB,EAAZ;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AAEAW,EAAAA,WAAW,CAAC,MAAM;AAChB,UAAMC,GAAG,GAAG,IAAIT,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAMS,IAAI,GAAGX,GAAG,GAAGU,GAAnB;AAEAN,IAAAA,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAYF,IAAI,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAL,IAAkC,OAAO,EAAP,GAAY,EAA9C,CAAX,CAAD,CAAR;AACAL,IAAAA,UAAU,CAACM,IAAI,CAACC,KAAL,CAAYF,IAAI,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAL,IAA6B,OAAO,EAApC,CAAX,CAAD,CAAV;AACAH,IAAAA,UAAU,CAACI,IAAI,CAACC,KAAL,CAAYF,IAAI,IAAI,OAAO,EAAX,CAAL,GAAuB,IAAlC,CAAD,CAAV;AACD,GAPU,EAOR,IAPQ,CAAX;AASA,sBACE;AAAA,2BACE;AAAK,MAAA,KAAK,EAAC,MAAX;AAAA,8BACE;AAAA,kBAAMR;AAAN;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA3BuBR,K;;KAAAA,K","sourcesContent":["import { useState } from \"react\";\n\nexport default function Count() {\n  const end = new Date(2021, 11, 31).getTime();\n\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n\n  setInterval(() => {\n    const now = new Date().getTime();\n    const diff = end - now;\n\n    setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n    setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  }, 1000);\n\n  return (\n    <div>\n      <div class=\"flex\">\n        <div>{hours}</div>\n        <span>:</span>\n        <div>{minutes}</div>\n        <span>:</span>\n        <div>{seconds}</div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}