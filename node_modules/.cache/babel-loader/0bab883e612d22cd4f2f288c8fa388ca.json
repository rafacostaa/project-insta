{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { calculateCountdownFromNow, Container } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Count = \"2025-07-05 17:00\";\n\nfunction App() {\n  _s();\n\n  const [{\n    expired,\n    values: {\n      days,\n      hours,\n      minutes,\n      seconds\n    }\n  }, setResult] = useState(() => calculateCountdownFromNow(countdownDate));\n  useEffect(() => {\n    if (expired) return undefined;\n    const intervalId = setInterval(() => setResult(calculateCountdownFromNow(countdownDate)), 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [expired]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: expired ? \"It's the time\" : `${days}d ${hours}h ${minutes}m ${seconds}s`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dLgbrMZTuF8x/uUWy11TKsWSfhM=\");\n\n_c = App;\nexport default Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","ReactDOM","calculateCountdownFromNow","Container","Count","App","expired","values","days","hours","minutes","seconds","setResult","countdownDate","undefined","intervalId","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,yBAAT,EAAoCC,SAApC,QAAqD,SAArD;;AAEA,MAAMC,KAAK,GAAG,kBAAd;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CACJ;AACEC,IAAAA,OADF;AAEEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,OAAf;AAAwBC,MAAAA;AAAxB;AAFV,GADI,EAKJC,SALI,IAMFb,QAAQ,CAAC,MAAMG,yBAAyB,CAACW,aAAD,CAAhC,CANZ;AAQAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,OAAJ,EAAa,OAAOQ,SAAP;AACb,UAAMC,UAAU,GAAGC,WAAW,CAC5B,MAAMJ,SAAS,CAACV,yBAAyB,CAACW,aAAD,CAA1B,CADa,EAE5B,IAF4B,CAA9B;AAIA,WAAO,MAAM;AACXI,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GATQ,EASN,CAACT,OAAD,CATM,CAAT;AAUA,sBACE,QAAC,SAAD;AAAA,cACGA,OAAO,GAAG,eAAH,GAAsB,GAAEE,IAAK,KAAIC,KAAM,KAAIC,OAAQ,KAAIC,OAAQ;AADzE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAxBQN,G;;KAAAA,G;AA0BT,eAAeD,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { calculateCountdownFromNow, Container } from \"./utils\";\n\nconst Count = \"2025-07-05 17:00\";\n\nfunction App() {\n  const [\n    {\n      expired,\n      values: { days, hours, minutes, seconds },\n    },\n    setResult,\n  ] = useState(() => calculateCountdownFromNow(countdownDate));\n\n  useEffect(() => {\n    if (expired) return undefined;\n    const intervalId = setInterval(\n      () => setResult(calculateCountdownFromNow(countdownDate)),\n      1000\n    );\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [expired]);\n  return (\n    <Container>\n      {expired ? \"It's the time\" : `${days}d ${hours}h ${minutes}m ${seconds}s`}\n    </Container>\n  );\n}\n\nexport default Count;\n"]},"metadata":{},"sourceType":"module"}