{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useCountDown = number => {\n  _s();\n\n  const [nextDate2, setNextDate2] = useState(number);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setNextDate2(nextDate2 => nextDate2 - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [nextDate2]);\n  return {\n    expired: false,\n    values: {\n      hours: Math.floor(nextDate2 % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n      minutes: Math.floor(nextDate2 % (1000 * 60 * 60) / (1000 * 60)),\n      seconds: Math.floor(nextDate2 % (1000 * 60) / 1000)\n    }\n  };\n};\n\n_s(useCountDown, \"kbyn/GuzAq7gLv28+3Gm8HzJgFE=\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","useEffect","useCountDown","number","nextDate2","setNextDate2","interval","setInterval","clearInterval","expired","values","hours","Math","floor","minutes","seconds"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAAA;;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAACG,MAAD,CAA1C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,YAAY,CAAED,SAAD,IAAeA,SAAS,GAAG,IAA5B,CAAZ;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGA,WAAO,MAAMI,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,CAACF,SAAD,CALM,CAAT;AAOA,SAAO;AACLK,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAV,IAAuC,OAAO,EAAP,GAAY,EAAnD,CAAX,CADD;AAENU,MAAAA,OAAO,EAAEF,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAV,IAAkC,OAAO,EAAzC,CAAX,CAFH;AAGNW,MAAAA,OAAO,EAAEH,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAX,CAAV,GAA4B,IAAvC;AAHH;AAFH,GAAP;AAQD,CAlBM;;GAAMF,Y","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useCountDown = (number) => {\n  const [nextDate2, setNextDate2] = useState(number);\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setNextDate2((nextDate2) => nextDate2 - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [nextDate2]);\n\n  return {\n    expired: false,\n    values: {\n      hours: Math.floor((nextDate2 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((nextDate2 % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((nextDate2 % (1000 * 60)) / 1000),\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}