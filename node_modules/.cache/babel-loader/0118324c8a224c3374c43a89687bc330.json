{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nexport const calculateCountdownFromNow2 = number => {\n  _s();\n\n  const [nextDate2, setnextDate2] = useState(number);\n\n  if (nextDate2 < 0) {\n    return {\n      expired: true,\n      values: {\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      }\n    };\n  }\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setnextDate2(nextDate2 => nextDate2 - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [nextDate2]);\n  return {\n    expired: false,\n    values: {\n      hours: Math.floor(nextDate2 % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n      minutes: Math.floor(nextDate2 % (1000 * 60 * 60) / (1000 * 60)),\n      seconds: Math.floor(nextDate2 % (1000 * 60) / 1000)\n    }\n  };\n};\n\n_s(calculateCountdownFromNow2, \"14e/Z0KvD70V/SjA0xKI4GI1nvM=\");\n\nconsole.log(calculateCountdownFromNow2(790968)); // const Count = () => {\n//   const [seconds, setSeconds] = useState(790968);\n//   useEffect(() => {\n//     let interval = setInterval(() => {\n//       setSeconds((seconds) => seconds - 1);\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, [seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n//   useEffect(() => {\n//     let interval = null;\n//     if (isActive) {\n//       interval = setInterval(() => {\n//         calculateCountdownFromNow(seconds);\n//         setSeconds((seconds) => seconds - 1);\n//       }, 1000);\n//     } else if (!isActive && seconds !== 0) {\n//       clearInterval(interval);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isActive, seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n// export default Count;","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","calculateCountdownFromNow2","number","nextDate2","setnextDate2","expired","values","hours","minutes","seconds","interval","setInterval","clearInterval","Math","floor","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,0BAA0B,GAAIC,MAAD,IAAY;AAAA;;AACpD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAACG,MAAD,CAA1C;;AACA,MAAIC,SAAS,GAAG,CAAhB,EAAmB;AACjB,WAAO;AACLE,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CADD;AAENC,QAAAA,OAAO,EAAE,CAFH;AAGNC,QAAAA,OAAO,EAAE;AAHH;AAFH,KAAP;AAQD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BP,MAAAA,YAAY,CAAED,SAAD,IAAeA,SAAS,GAAG,IAA5B,CAAZ;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGA,WAAO,MAAMS,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,CAACP,SAAD,CALM,CAAT;AAOA,SAAO;AACLE,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAEM,IAAI,CAACC,KAAL,CAAYX,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAV,IAAuC,OAAO,EAAP,GAAY,EAAnD,CAAX,CADD;AAENK,MAAAA,OAAO,EAAEK,IAAI,CAACC,KAAL,CAAYX,SAAS,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAV,IAAkC,OAAO,EAAzC,CAAX,CAFH;AAGNM,MAAAA,OAAO,EAAEI,IAAI,CAACC,KAAL,CAAYX,SAAS,IAAI,OAAO,EAAX,CAAV,GAA4B,IAAvC;AAHH;AAFH,GAAP;AAQD,CA5BM;;GAAMF,0B;;AA8Bbc,OAAO,CAACC,GAAR,CAAYf,0BAA0B,CAAC,MAAD,CAAtC,E,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const calculateCountdownFromNow2 = (number) => {\n  const [nextDate2, setnextDate2] = useState(number);\n  if (nextDate2 < 0) {\n    return {\n      expired: true,\n      values: {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  }\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setnextDate2((nextDate2) => nextDate2 - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [nextDate2]);\n\n  return {\n    expired: false,\n    values: {\n      hours: Math.floor((nextDate2 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((nextDate2 % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((nextDate2 % (1000 * 60)) / 1000),\n    },\n  };\n};\n\nconsole.log(calculateCountdownFromNow2(790968));\n// const Count = () => {\n//   const [seconds, setSeconds] = useState(790968);\n\n//   useEffect(() => {\n//     let interval = setInterval(() => {\n//       setSeconds((seconds) => seconds - 1);\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, [seconds]);\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n//   useEffect(() => {\n//     let interval = null;\n//     if (isActive) {\n//       interval = setInterval(() => {\n//         calculateCountdownFromNow(seconds);\n//         setSeconds((seconds) => seconds - 1);\n//       }, 1000);\n//     } else if (!isActive && seconds !== 0) {\n//       clearInterval(interval);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isActive, seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n\n// export default Count;\n"]},"metadata":{},"sourceType":"module"}