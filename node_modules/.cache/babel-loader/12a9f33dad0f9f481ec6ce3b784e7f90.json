{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nexport const useCountDown = number => {\n  _s();\n\n  const [nextDate2, setNextDate2] = useState(number); //   if (nextDate2 < 0) {\n  //     return {\n  //       expired: true,\n  //       values: {\n  //         hours: 0,\n  //         minutes: 0,\n  //         seconds: 0,\n  //       },\n  //     };\n  //   }\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setNextDate2(nextDate2 => nextDate2 - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [nextDate2]);\n  return {\n    expired: false,\n    values: {\n      hours: Math.floor(nextDate2 % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n      minutes: Math.floor(nextDate2 % (1000 * 60 * 60) / (1000 * 60)),\n      seconds: Math.floor(nextDate2 % (1000 * 60) / 1000)\n    }\n  };\n}; // const Count = () => {\n//   const [seconds, setSeconds] = useState(790968);\n//   useEffect(() => {\n//     let interval = setInterval(() => {\n//       setSeconds((seconds) => seconds - 1);\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, [seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n//   useEffect(() => {\n//     let interval = null;\n//     if (isActive) {\n//       interval = setInterval(() => {\n//         calculateCountdownFromNow(seconds);\n//         setSeconds((seconds) => seconds - 1);\n//       }, 1000);\n//     } else if (!isActive && seconds !== 0) {\n//       clearInterval(interval);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isActive, seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n// export default Count;\n\n_s(useCountDown, \"kbyn/GuzAq7gLv28+3Gm8HzJgFE=\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","useCountDown","number","nextDate2","setNextDate2","interval","setInterval","clearInterval","expired","values","hours","Math","floor","minutes","seconds"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAAA;;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAACG,MAAD,CAA1C,CADsC,CAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,YAAY,CAAED,SAAD,IAAeA,SAAS,GAAG,IAA5B,CAAZ;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGA,WAAO,MAAMI,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,CAACF,SAAD,CALM,CAAT;AAOA,SAAO;AACLK,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAV,IAAuC,OAAO,EAAP,GAAY,EAAnD,CAAX,CADD;AAENU,MAAAA,OAAO,EAAEF,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAV,IAAkC,OAAO,EAAzC,CAAX,CAFH;AAGNW,MAAAA,OAAO,EAAEH,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAX,CAAV,GAA4B,IAAvC;AAHH;AAFH,GAAP;AAQD,CA5BM,C,CA8BP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;GAjEaF,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const useCountDown = (number) => {\n  const [nextDate2, setNextDate2] = useState(number);\n  //   if (nextDate2 < 0) {\n  //     return {\n  //       expired: true,\n  //       values: {\n  //         hours: 0,\n  //         minutes: 0,\n  //         seconds: 0,\n  //       },\n  //     };\n  //   }\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setNextDate2((nextDate2) => nextDate2 - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [nextDate2]);\n\n  return {\n    expired: false,\n    values: {\n      hours: Math.floor((nextDate2 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((nextDate2 % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((nextDate2 % (1000 * 60)) / 1000),\n    },\n  };\n};\n\n// const Count = () => {\n//   const [seconds, setSeconds] = useState(790968);\n\n//   useEffect(() => {\n//     let interval = setInterval(() => {\n//       setSeconds((seconds) => seconds - 1);\n//     }, 1000);\n//     return () => clearInterval(interval);\n//   }, [seconds]);\n\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n//   useEffect(() => {\n//     let interval = null;\n//     if (isActive) {\n//       interval = setInterval(() => {\n//         calculateCountdownFromNow(seconds);\n//         setSeconds((seconds) => seconds - 1);\n//       }, 1000);\n//     } else if (!isActive && seconds !== 0) {\n//       clearInterval(interval);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isActive, seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n\n// export default Count;\n"]},"metadata":{},"sourceType":"module"}