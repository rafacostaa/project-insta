{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// const useCountdown = (seconds) => {\n//   // initialize timeLeft with the seconds prop\n//   const [timeLeft, setTimeLeft] = useState(seconds);\n//   useEffect(() => {\n//     // exit early when we reach 0\n//     if (!timeLeft) return;\n//     // save intervalId to clear the interval when the\n//     // component re-renders\n//     const intervalId = setInterval(() => {\n//       setTimeLeft(timeLeft - 1);\n//     }, 1000);\n//     // clear interval on re-render to avoid memory leaks\n//     return () => clearInterval(intervalId);\n//     // add timeLeft as a dependency to re-rerun the effect\n//     // when we update it\n//   }, [timeLeft]);\n//   return timeLeft;\n// };\n// export default useCountdown;","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// const useCountdown = (seconds) => {\n//   // initialize timeLeft with the seconds prop\n//   const [timeLeft, setTimeLeft] = useState(seconds);\n\n//   useEffect(() => {\n//     // exit early when we reach 0\n//     if (!timeLeft) return;\n\n//     // save intervalId to clear the interval when the\n//     // component re-renders\n//     const intervalId = setInterval(() => {\n//       setTimeLeft(timeLeft - 1);\n//     }, 1000);\n\n//     // clear interval on re-render to avoid memory leaks\n//     return () => clearInterval(intervalId);\n//     // add timeLeft as a dependency to re-rerun the effect\n//     // when we update it\n//   }, [timeLeft]);\n\n//   return timeLeft;\n// };\n\n// export default useCountdown;\n"]},"metadata":{},"sourceType":"module"}