{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Count() {\n  _s();\n\n  const end = 70000; //   console.log(end);\n\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n\n  function secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    var s = Math.floor(d % 3600 % 60);\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\n    return hDisplay + mDisplay + sDisplay;\n  } //   setInterval(() => {\n  //     const now = 1;\n  //     const diff = end - now;\n  //     // console.log(diff);\n  //     setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     // setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     // setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //     // setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //   }, 1000);\n\n\n  console.log(secondsToHms(790968));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: secondsToHms(790968)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [hours, \":\", minutes, \":\", seconds]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Count, \"YqMGD5OXkwOFKIyRFtjAnU+Dzzc=\");\n\n_c = Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","Count","end","hours","setHours","minutes","setMinutes","seconds","setSeconds","secondsToHms","d","Number","h","Math","floor","m","s","hDisplay","mDisplay","sDisplay","console","log"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAMC,GAAG,GAAG,KAAZ,CAD8B,CAE9B;;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,EAAlC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,EAAtC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;;AAEA,WAASS,YAAT,CAAsBC,CAAtB,EAAyB;AACvBA,IAAAA,CAAC,GAAGC,MAAM,CAACD,CAAD,CAAV;AACA,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAG,IAAf,CAAR;AACA,QAAIK,CAAC,GAAGF,IAAI,CAACC,KAAL,CAAYJ,CAAC,GAAG,IAAL,GAAa,EAAxB,CAAR;AACA,QAAIM,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAYJ,CAAC,GAAG,IAAL,GAAa,EAAxB,CAAR;AAEA,QAAIO,QAAQ,GAAGL,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,SAAT,GAAqB,UAAzB,CAAT,GAAgD,EAA/D;AACA,QAAIM,QAAQ,GAAGH,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,WAAT,GAAuB,YAA3B,CAAT,GAAoD,EAAnE;AACA,QAAII,QAAQ,GAAGH,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,SAAT,GAAqB,UAAzB,CAAT,GAAgD,EAA/D;AACA,WAAOC,QAAQ,GAAGC,QAAX,GAAsBC,QAA7B;AACD,GAlB6B,CAmB9B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,YAAY,CAAC,MAAD,CAAxB;AACA,sBACE;AAAA,4BACE;AAAA,gBAAKA,YAAY,CAAC,MAAD;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACGN,KADH,OACWE,OADX,OACqBE,OADrB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAxCuBN,K;;KAAAA,K","sourcesContent":["import { useState } from \"react\";\n\nexport default function Count() {\n  const end = 70000;\n  //   console.log(end);\n\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n\n  function secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor((d % 3600) / 60);\n    var s = Math.floor((d % 3600) % 60);\n\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\n    return hDisplay + mDisplay + sDisplay;\n  }\n  //   setInterval(() => {\n  //     const now = 1;\n  //     const diff = end - now;\n  //     // console.log(diff);\n\n  //     setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     // setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  //     setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     // setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n  //     setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //     // setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  //   }, 1000);\n  console.log(secondsToHms(790968));\n  return (\n    <div>\n      <h1>{secondsToHms(790968)}</h1>\n      <h1>\n        {hours}:{minutes}:{seconds}\n      </h1>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}