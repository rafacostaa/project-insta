{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const useCountDown = number => {\n  _s();\n\n  const [counter, setCounter] = useState(number);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setCounter(counter => counter - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [counter]);\n  const values = {\n    hours: Math.floor(counter % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n    minutes: Math.floor(counter % (1000 * 60 * 60) / (1000 * 60)),\n    seconds: Math.floor(counter % (1000 * 60) / 1000)\n  };\n\n  if (counter < 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\\"prazo expirado\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [values.hours, \":\", values.minutes, \":\", values.seconds]\n    }, void 0, true);\n  }\n};\n\n_s(useCountDown, \"jqIHFAgJztcC0n2AbQD3y0RQY8M=\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","useEffect","useCountDown","number","counter","setCounter","interval","setInterval","clearInterval","values","hours","Math","floor","minutes","seconds"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAAA;;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAACG,MAAD,CAAtC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,IAAxB,CAAV;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGA,WAAO,MAAMI,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,CAACF,OAAD,CALM,CAAT;AAOA,QAAMK,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAYR,OAAO,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAR,IAAqC,OAAO,EAAP,GAAY,EAAjD,CAAX,CADM;AAEbS,IAAAA,OAAO,EAAEF,IAAI,CAACC,KAAL,CAAYR,OAAO,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAR,IAAgC,OAAO,EAAvC,CAAX,CAFI;AAGbU,IAAAA,OAAO,EAAEH,IAAI,CAACC,KAAL,CAAYR,OAAO,IAAI,OAAO,EAAX,CAAR,GAA0B,IAArC;AAHI,GAAf;;AAMA,MAAIA,OAAO,GAAG,CAAd,EAAiB;AACf,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAA,iBACGK,MAAM,CAACC,KADV,OACkBD,MAAM,CAACI,OADzB,OACmCJ,MAAM,CAACK,OAD1C;AAAA,oBADF;AAKD;AACF,CAzBM;;GAAMZ,Y","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useCountDown = (number) => {\n  const [counter, setCounter] = useState(number);\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setCounter((counter) => counter - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [counter]);\n\n  const values = {\n    hours: Math.floor((counter % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    minutes: Math.floor((counter % (1000 * 60 * 60)) / (1000 * 60)),\n    seconds: Math.floor((counter % (1000 * 60)) / 1000),\n  };\n\n  if (counter < 0) {\n    return <div>\"prazo expirado\"</div>;\n  } else {\n    return (\n      <>\n        {values.hours}:{values.minutes}:{values.seconds}\n      </>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}