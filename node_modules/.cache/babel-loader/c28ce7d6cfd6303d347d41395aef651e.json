{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Count = () => {\n  _s();\n\n  const [{\n    expired,\n    values: {\n      days,\n      hours,\n      minutes,\n      seconds\n    }\n  }, setResult] = useState(() => calculateCountdownFromNow(countdownDate));\n  useEffect(() => {\n    if (expired) return undefined;\n    const intervalId = setInterval(() => setResult(calculateCountdownFromNow(countdownDate)), 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [expired]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: expired ? \"It's the time\" : `${days}d ${hours}h ${minutes}m ${seconds}s`\n  }, void 0, false);\n};\n\n_s(Count, \"dLgbrMZTuF8x/uUWy11TKsWSfhM=\");\n\n_c = Count;\nexport default Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","Count","expired","values","days","hours","minutes","seconds","setResult","useState","calculateCountdownFromNow","countdownDate","useEffect","undefined","intervalId","setInterval","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CACJ;AACEC,IAAAA,OADF;AAEEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,OAAf;AAAwBC,MAAAA;AAAxB;AAFV,GADI,EAKJC,SALI,IAMFC,QAAQ,CAAC,MAAMC,yBAAyB,CAACC,aAAD,CAAhC,CANZ;AAQAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIV,OAAJ,EAAa,OAAOW,SAAP;AACb,UAAMC,UAAU,GAAGC,WAAW,CAC5B,MAAMP,SAAS,CAACE,yBAAyB,CAACC,aAAD,CAA1B,CADa,EAE5B,IAF4B,CAA9B;AAIA,WAAO,MAAM;AACXK,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GATQ,EASN,CAACZ,OAAD,CATM,CAAT;AAUA,sBACE;AAAA,cACGA,OAAO,GAAG,eAAH,GAAsB,GAAEE,IAAK,KAAIC,KAAM,KAAIC,OAAQ,KAAIC,OAAQ;AADzE,mBADF;AAKD,CAxBD;;GAAMN,K;;KAAAA,K;AA0BN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n\nconst Count = () => {\n  const [\n    {\n      expired,\n      values: { days, hours, minutes, seconds },\n    },\n    setResult,\n  ] = useState(() => calculateCountdownFromNow(countdownDate));\n\n  useEffect(() => {\n    if (expired) return undefined;\n    const intervalId = setInterval(\n      () => setResult(calculateCountdownFromNow(countdownDate)),\n      1000\n    );\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [expired]);\n  return (\n    <>\n      {expired ? \"It's the time\" : `${days}d ${hours}h ${minutes}m ${seconds}s`}\n    </>\n  );\n};\n\nexport default Count;\n"]},"metadata":{},"sourceType":"module"}