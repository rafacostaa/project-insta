{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useCountDown = number => {\n  _s();\n\n  const [counter, setCounter] = useState(number);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setCounter(counter => counter - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [counter]);\n\n  if (counter < 0) {\n    return {\n      expired: true,\n      values: {\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      }\n    };\n  } else {\n    return {\n      expired: false,\n      values: {\n        hours: Math.floor(counter % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n        minutes: Math.floor(counter % (1000 * 60 * 60) / (1000 * 60)),\n        seconds: Math.floor(counter % (1000 * 60) / 1000)\n      }\n    };\n  }\n};\n\n_s(useCountDown, \"jqIHFAgJztcC0n2AbQD3y0RQY8M=\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","useEffect","useCountDown","number","counter","setCounter","interval","setInterval","clearInterval","expired","values","hours","minutes","seconds","Math","floor"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY;AAAA;;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAACG,MAAD,CAAtC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,UAAU,CAAED,OAAD,IAAaA,OAAO,GAAG,IAAxB,CAAV;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGA,WAAO,MAAMI,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,CAACF,OAAD,CALM,CAAT;;AAOA,MAAIA,OAAO,GAAG,CAAd,EAAiB;AACf,WAAO;AACLK,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CADD;AAENC,QAAAA,OAAO,EAAE,CAFH;AAGNC,QAAAA,OAAO,EAAE;AAHH;AAFH,KAAP;AAQD,GATD,MASO;AACL,WAAO;AACLJ,MAAAA,OAAO,EAAE,KADJ;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEG,IAAI,CAACC,KAAL,CAAYX,OAAO,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAR,IAAqC,OAAO,EAAP,GAAY,EAAjD,CAAX,CADD;AAENQ,QAAAA,OAAO,EAAEE,IAAI,CAACC,KAAL,CAAYX,OAAO,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAR,IAAgC,OAAO,EAAvC,CAAX,CAFH;AAGNS,QAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAYX,OAAO,IAAI,OAAO,EAAX,CAAR,GAA0B,IAArC;AAHH;AAFH,KAAP;AAQD;AACF,CA7BM;;GAAMF,Y","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useCountDown = (number) => {\n  const [counter, setCounter] = useState(number);\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setCounter((counter) => counter - 1000);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [counter]);\n\n  if (counter < 0) {\n    return {\n      expired: true,\n      values: {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  } else {\n    return {\n      expired: false,\n      values: {\n        hours: Math.floor((counter % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        minutes: Math.floor((counter % (1000 * 60 * 60)) / (1000 * 60)),\n        seconds: Math.floor((counter % (1000 * 60)) / 1000),\n      },\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}