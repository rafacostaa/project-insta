{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Count() {\n  _s();\n\n  const end = 70000;\n  console.log(end);\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n  setInterval(() => {\n    const now = 1;\n    const diff = end - now; // console.log(diff);\n\n    setHours(Math.floor(diff % (1000 * 60 * 60 * 24) / (1000 * 60 * 60))); // setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n    setMinutes(Math.floor(diff % (1000 * 60 * 60) / (1000 * 60))); // setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n\n    setSeconds(Math.floor(diff % (1000 * 60) / 1000)); // setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [hours, \":\", minutes, \":\", seconds]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Count, \"YqMGD5OXkwOFKIyRFtjAnU+Dzzc=\");\n\n_c = Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["useState","Count","end","console","log","hours","setHours","minutes","setMinutes","seconds","setSeconds","setInterval","now","diff","Math","floor"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAMC,GAAG,GAAG,KAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AAEAW,EAAAA,WAAW,CAAC,MAAM;AAChB,UAAMC,GAAG,GAAG,CAAZ;AACA,UAAMC,IAAI,GAAGX,GAAG,GAAGU,GAAnB,CAFgB,CAGhB;;AAEAN,IAAAA,QAAQ,CAACQ,IAAI,CAACC,KAAL,CAAYF,IAAI,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAL,IAAkC,OAAO,EAAP,GAAY,EAA9C,CAAX,CAAD,CAAR,CALgB,CAMhB;;AACAL,IAAAA,UAAU,CAACM,IAAI,CAACC,KAAL,CAAYF,IAAI,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAL,IAA6B,OAAO,EAApC,CAAX,CAAD,CAAV,CAPgB,CAQhB;;AACAH,IAAAA,UAAU,CAACI,IAAI,CAACC,KAAL,CAAYF,IAAI,IAAI,OAAO,EAAX,CAAL,GAAuB,IAAlC,CAAD,CAAV,CATgB,CAUhB;AACD,GAXU,EAWR,IAXQ,CAAX;AAaA,sBACE;AAAA,eACGR,KADH,OACWE,OADX,OACqBE,OADrB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA1BuBR,K;;KAAAA,K","sourcesContent":["import { useState } from \"react\";\n\nexport default function Count() {\n  const end = 70000;\n  console.log(end);\n\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n\n  setInterval(() => {\n    const now = 1;\n    const diff = end - now;\n    // console.log(diff);\n\n    setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    // setHours(Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n    // setMinutes(Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)));\n    setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n    // setSeconds(Math.floor((diff % (1000 * 60)) / 1000));\n  }, 1000);\n\n  return (\n    <div>\n      {hours}:{minutes}:{seconds}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}