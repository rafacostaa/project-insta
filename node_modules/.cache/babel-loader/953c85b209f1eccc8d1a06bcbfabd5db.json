{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countdownDate = 790968;\nexport const calculateCountdownFromNow = nextDate => {\n  //   const now = new Date().getTime();\n  //   const distance = new Date(nextDate).getTime() - now;\n  const distance = nextDate;\n\n  if (distance < 0) {\n    return {\n      expired: true,\n      values: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      }\n    };\n  }\n\n  return {\n    expired: false,\n    values: {\n      days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n      hours: Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n      minutes: Math.floor(distance % (1000 * 60 * 60) / (1000 * 60)),\n      seconds: Math.floor(distance % (1000 * 60) / 1000)\n    }\n  };\n};\n\nconst Count = () => {\n  _s();\n\n  const [{\n    expired,\n    values: {\n      days,\n      hours,\n      minutes,\n      seconds\n    }\n  }, setResult] = useState(() => calculateCountdownFromNow(countdownDate));\n  useEffect(() => {\n    if (expired) return undefined;\n    const intervalId = setInterval(() => setResult(calculateCountdownFromNow(countdownDate)), 1000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [expired]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: expired ? \"It's the time\" : `${days}d ${hours}h ${minutes}m ${seconds}s`\n  }, void 0, false);\n};\n\n_s(Count, \"dLgbrMZTuF8x/uUWy11TKsWSfhM=\");\n\n_c = Count;\nexport default Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","countdownDate","calculateCountdownFromNow","nextDate","distance","expired","values","days","hours","minutes","seconds","Math","floor","Count","setResult","undefined","intervalId","setInterval","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,aAAa,GAAG,MAAtB;AAEA,OAAO,MAAMC,yBAAyB,GAAIC,QAAD,IAAc;AACrD;AAEA;AACA,QAAMC,QAAQ,GAAGD,QAAjB;;AAEA,MAAIC,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,CADA;AAENC,QAAAA,KAAK,EAAE,CAFD;AAGNC,QAAAA,OAAO,EAAE,CAHH;AAINC,QAAAA,OAAO,EAAE;AAJH;AAFH,KAAP;AASD;;AAED,SAAO;AACLL,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWR,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CADA;AAENI,MAAAA,KAAK,EAAEG,IAAI,CAACC,KAAL,CAAYR,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CAAX,CAFD;AAGNK,MAAAA,OAAO,EAAEE,IAAI,CAACC,KAAL,CAAYR,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAHH;AAINM,MAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAYR,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC;AAJH;AAFH,GAAP;AASD,CA3BM;;AA6BP,MAAMS,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CACJ;AACER,IAAAA,OADF;AAEEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,OAAf;AAAwBC,MAAAA;AAAxB;AAFV,GADI,EAKJI,SALI,IAMFf,QAAQ,CAAC,MAAMG,yBAAyB,CAACD,aAAD,CAAhC,CANZ;AAQAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,OAAJ,EAAa,OAAOU,SAAP;AACb,UAAMC,UAAU,GAAGC,WAAW,CAC5B,MAAMH,SAAS,CAACZ,yBAAyB,CAACD,aAAD,CAA1B,CADa,EAE5B,IAF4B,CAA9B;AAIA,WAAO,MAAM;AACXiB,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GATQ,EASN,CAACX,OAAD,CATM,CAAT;AAUA,sBACE;AAAA,cACGA,OAAO,GAAG,eAAH,GAAsB,GAAEE,IAAK,KAAIC,KAAM,KAAIC,OAAQ,KAAIC,OAAQ;AADzE,mBADF;AAKD,CAxBD;;GAAMG,K;;KAAAA,K;AA0BN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst countdownDate = 790968;\n\nexport const calculateCountdownFromNow = (nextDate) => {\n  //   const now = new Date().getTime();\n\n  //   const distance = new Date(nextDate).getTime() - now;\n  const distance = nextDate;\n\n  if (distance < 0) {\n    return {\n      expired: true,\n      values: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  }\n\n  return {\n    expired: false,\n    values: {\n      days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((distance % (1000 * 60)) / 1000),\n    },\n  };\n};\n\nconst Count = () => {\n  const [\n    {\n      expired,\n      values: { days, hours, minutes, seconds },\n    },\n    setResult,\n  ] = useState(() => calculateCountdownFromNow(countdownDate));\n\n  useEffect(() => {\n    if (expired) return undefined;\n    const intervalId = setInterval(\n      () => setResult(calculateCountdownFromNow(countdownDate)),\n      1000\n    );\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [expired]);\n  return (\n    <>\n      {expired ? \"It's the time\" : `${days}d ${hours}h ${minutes}m ${seconds}s`}\n    </>\n  );\n};\n\nexport default Count;\n"]},"metadata":{},"sourceType":"module"}