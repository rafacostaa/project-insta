{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\n\nconst useCountdown = seconds => {\n  _s();\n\n  // initialize timeLeft with the seconds prop\n  const [timeLeft, setTimeLeft] = useState(seconds);\n  var seconds = Math.floor(t / 1000 % 60);\n  var minutes = Math.floor(t / 1000 / 60 % 60);\n  var hours = Math.floor(t / (1000 * 60 * 60) % 24);\n  var days = Math.floor(t / (1000 * 60 * 60 * 24));\n  useEffect(() => {\n    // exit early when we reach 0\n    if (!timeLeft) return; // save intervalId to clear the interval when the\n    // component re-renders\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000); // clear interval on re-render to avoid memory leaks\n\n    return () => clearInterval(intervalId); // add timeLeft as a dependency to re-rerun the effect\n    // when we update it\n  }, [timeLeft]);\n  return timeLeft;\n};\n\n_s(useCountdown, \"9JJnqmTCdqLHDdCmRHNOIx0rlJg=\");\n\nexport default useCountdown;","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","useCountdown","seconds","timeLeft","setTimeLeft","Math","floor","t","minutes","hours","days","intervalId","setInterval","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,YAAY,GAAIC,OAAD,IAAa;AAAA;;AAChC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,OAAD,CAAxC;AAEA,MAAIA,OAAO,GAAGG,IAAI,CAACC,KAAL,CAAYC,CAAC,GAAG,IAAL,GAAa,EAAxB,CAAd;AACA,MAAIC,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYC,CAAC,GAAG,IAAJ,GAAW,EAAZ,GAAkB,EAA7B,CAAd;AACA,MAAIE,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAYC,CAAC,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAF,GAAyB,EAApC,CAAZ;AACA,MAAIG,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWC,CAAC,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAZ,CAAX;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACG,QAAL,EAAe,OAFD,CAId;AACA;;AACA,UAAMQ,UAAU,GAAGC,WAAW,CAAC,MAAM;AACnCR,MAAAA,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAX;AACD,KAF6B,EAE3B,IAF2B,CAA9B,CANc,CAUd;;AACA,WAAO,MAAMU,aAAa,CAACF,UAAD,CAA1B,CAXc,CAYd;AACA;AACD,GAdQ,EAcN,CAACR,QAAD,CAdM,CAAT;AAgBA,SAAOA,QAAP;AACD,CAzBD;;GAAMF,Y;;AA2BN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst useCountdown = (seconds) => {\n  // initialize timeLeft with the seconds prop\n  const [timeLeft, setTimeLeft] = useState(seconds);\n\n  var seconds = Math.floor((t / 1000) % 60);\n  var minutes = Math.floor((t / 1000 / 60) % 60);\n  var hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n  var days = Math.floor(t / (1000 * 60 * 60 * 24));\n  useEffect(() => {\n    // exit early when we reach 0\n    if (!timeLeft) return;\n\n    // save intervalId to clear the interval when the\n    // component re-renders\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    // clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n    // add timeLeft as a dependency to re-rerun the effect\n    // when we update it\n  }, [timeLeft]);\n\n  return timeLeft;\n};\n\nexport default useCountdown;\n"]},"metadata":{},"sourceType":"module"}