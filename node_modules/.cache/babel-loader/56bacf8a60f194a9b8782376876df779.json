{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst countdownDate = 10000;\nexport const calculateCountdownFromNow = nextDate => {\n  //   const now = new Date().getTime();\n  const distance = nextDate - 1000; //   const distance = nextDate;\n\n  if (distance < 0) {\n    return {\n      expired: true,\n      values: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      }\n    };\n  }\n\n  return {\n    expired: false,\n    values: {\n      days: Math.floor(distance / (60 * 60 * 24)),\n      hours: Math.floor(distance % (60 * 60 * 24) / (1000 * 60 * 60)),\n      minutes: Math.floor(distance % (1000 * 60 * 60) / (1000 * 60)),\n      seconds: Math.floor(distance % (1000 * 60) / 1000) //   days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n      //   hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      //   minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n      //   seconds: Math.floor((distance % (1000 * 60)) / 1000),\n\n    }\n  };\n};\n\nconst Count = () => {\n  _s();\n\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(true);\n  useEffect(() => {\n    let interval = null;\n\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: [seconds, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Count, \"7sFjtnDEMH0bvfHssLBjswIMD8c=\");\n\n_c = Count;\nexport default Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","countdownDate","calculateCountdownFromNow","nextDate","distance","expired","values","days","hours","minutes","seconds","Math","floor","Count","setSeconds","isActive","setIsActive","interval","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,aAAa,GAAG,KAAtB;AAEA,OAAO,MAAMC,yBAAyB,GAAIC,QAAD,IAAc;AACrD;AAEA,QAAMC,QAAQ,GAAGD,QAAQ,GAAG,IAA5B,CAHqD,CAIrD;;AAEA,MAAIC,QAAQ,GAAG,CAAf,EAAkB;AAChB,WAAO;AACLC,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,CADA;AAENC,QAAAA,KAAK,EAAE,CAFD;AAGNC,QAAAA,OAAO,EAAE,CAHH;AAINC,QAAAA,OAAO,EAAE;AAJH;AAFH,KAAP;AASD;;AAED,SAAO;AACLL,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWR,QAAQ,IAAI,KAAK,EAAL,GAAU,EAAd,CAAnB,CADA;AAENI,MAAAA,KAAK,EAAEG,IAAI,CAACC,KAAL,CAAYR,QAAQ,IAAI,KAAK,EAAL,GAAU,EAAd,CAAT,IAA+B,OAAO,EAAP,GAAY,EAA3C,CAAX,CAFD;AAGNK,MAAAA,OAAO,EAAEE,IAAI,CAACC,KAAL,CAAYR,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAHH;AAINM,MAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAYR,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAJH,CAKN;AACA;AACA;AACA;;AARM;AAFH,GAAP;AAaD,CA/BM;;AAiCP,MAAMS,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACH,OAAD,EAAUI,UAAV,IAAwBf,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,QAAQ,GAAG,IAAf;;AACA,QAAIF,QAAJ,EAAc;AACZE,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BJ,QAAAA,UAAU,CAAEJ,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGD,KAJD,MAIO,IAAI,CAACK,QAAD,IAAaL,OAAO,KAAK,CAA7B,EAAgC;AACrCS,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD;;AACD,WAAO,MAAME,aAAa,CAACF,QAAD,CAA1B;AACD,GAVQ,EAUN,CAACF,QAAD,EAAWL,OAAX,CAVM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,iBAAuBA,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;GAAMG,K;;KAAAA,K;AAsBN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst countdownDate = 10000;\n\nexport const calculateCountdownFromNow = (nextDate) => {\n  //   const now = new Date().getTime();\n\n  const distance = nextDate - 1000;\n  //   const distance = nextDate;\n\n  if (distance < 0) {\n    return {\n      expired: true,\n      values: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  }\n\n  return {\n    expired: false,\n    values: {\n      days: Math.floor(distance / (60 * 60 * 24)),\n      hours: Math.floor((distance % (60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((distance % (1000 * 60)) / 1000),\n      //   days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n      //   hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      //   minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n      //   seconds: Math.floor((distance % (1000 * 60)) / 1000),\n    },\n  };\n};\n\nconst Count = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(true);\n\n  useEffect(() => {\n    let interval = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        setSeconds((seconds) => seconds + 1);\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n  return (\n    <div className=\"app\">\n      <div className=\"time\">{seconds}s</div>\n    </div>\n  );\n};\n\nexport default Count;\n"]},"metadata":{},"sourceType":"module"}