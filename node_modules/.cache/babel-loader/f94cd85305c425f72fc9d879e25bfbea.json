{"ast":null,"code":"var _jsxFileName = \"/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const calculateCountdownFromNow = number => {\n  _s();\n\n  const [nextDate2, setnextDate2] = useState(number);\n\n  if (nextDate2 < 0) {\n    return {\n      expired: true,\n      values: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      }\n    };\n  }\n\n  return {\n    expired: false,\n    values: {\n      days: Math.floor(nextDate2 / (1000 * 60 * 60 * 24)),\n      hours: Math.floor(nextDate2 % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n      minutes: Math.floor(nextDate2 % (1000 * 60 * 60) / (1000 * 60)),\n      seconds: Math.floor(nextDate2 % (1000 * 60) / 1000)\n    }\n  };\n};\n\n_s(calculateCountdownFromNow, \"XZFaut5IA/maFy7/el/HPxehxh8=\");\n\nconsole.log(calculateCountdownFromNow(790968));\n\nconst Count = () => {\n  _s2();\n\n  const [seconds, setSeconds] = useState(790968);\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setSeconds(seconds => seconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [seconds]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: [seconds, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}; //   useEffect(() => {\n//     let interval = null;\n//     if (isActive) {\n//       interval = setInterval(() => {\n//         calculateCountdownFromNow(seconds);\n//         setSeconds((seconds) => seconds - 1);\n//       }, 1000);\n//     } else if (!isActive && seconds !== 0) {\n//       clearInterval(interval);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isActive, seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n\n\n_s2(Count, \"8HB12Qv8FVTv6EvPJ500WQiS1lU=\");\n\n_c = Count;\nexport default Count;\n\nvar _c;\n\n$RefreshReg$(_c, \"Count\");","map":{"version":3,"sources":["/Users/rafa/Documents/tmp/insta-test/src/service/useCountDown.js"],"names":["React","useState","useEffect","calculateCountdownFromNow","number","nextDate2","setnextDate2","expired","values","days","hours","minutes","seconds","Math","floor","console","log","Count","setSeconds","interval","setInterval","clearInterval"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,OAAO,MAAMC,yBAAyB,GAAIC,MAAD,IAAY;AAAA;;AACnD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAACG,MAAD,CAA1C;;AACA,MAAIC,SAAS,GAAG,CAAhB,EAAmB;AACjB,WAAO;AACLE,MAAAA,OAAO,EAAE,IADJ;AAELC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,CADA;AAENC,QAAAA,KAAK,EAAE,CAFD;AAGNC,QAAAA,OAAO,EAAE,CAHH;AAINC,QAAAA,OAAO,EAAE;AAJH;AAFH,KAAP;AASD;;AAED,SAAO;AACLL,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAEI,IAAI,CAACC,KAAL,CAAWT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAApB,CADA;AAENK,MAAAA,KAAK,EAAEG,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAV,IAAuC,OAAO,EAAP,GAAY,EAAnD,CAAX,CAFD;AAGNM,MAAAA,OAAO,EAAEE,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAV,IAAkC,OAAO,EAAzC,CAAX,CAHH;AAINO,MAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CAAYT,SAAS,IAAI,OAAO,EAAX,CAAV,GAA4B,IAAvC;AAJH;AAFH,GAAP;AASD,CAvBM;;GAAMF,yB;;AAyBbY,OAAO,CAACC,GAAR,CAAYb,yBAAyB,CAAC,MAAD,CAArC;;AACA,MAAMc,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACL,OAAD,EAAUM,UAAV,IAAwBjB,QAAQ,CAAC,MAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/BF,MAAAA,UAAU,CAAEN,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAV;AACD,KAFyB,EAEvB,IAFuB,CAA1B;AAGA,WAAO,MAAMS,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,CAACP,OAAD,CALM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,iBAAuBA,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAfD,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAjCMK,K;;KAAAA,K;AAmCN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport const calculateCountdownFromNow = (number) => {\n  const [nextDate2, setnextDate2] = useState(number);\n  if (nextDate2 < 0) {\n    return {\n      expired: true,\n      values: {\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      },\n    };\n  }\n\n  return {\n    expired: false,\n    values: {\n      days: Math.floor(nextDate2 / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((nextDate2 % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n      minutes: Math.floor((nextDate2 % (1000 * 60 * 60)) / (1000 * 60)),\n      seconds: Math.floor((nextDate2 % (1000 * 60)) / 1000),\n    },\n  };\n};\n\nconsole.log(calculateCountdownFromNow(790968));\nconst Count = () => {\n  const [seconds, setSeconds] = useState(790968);\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setSeconds((seconds) => seconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [seconds]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"time\">{seconds}s</div>\n    </div>\n  );\n};\n//   useEffect(() => {\n//     let interval = null;\n//     if (isActive) {\n//       interval = setInterval(() => {\n//         calculateCountdownFromNow(seconds);\n//         setSeconds((seconds) => seconds - 1);\n//       }, 1000);\n//     } else if (!isActive && seconds !== 0) {\n//       clearInterval(interval);\n//     }\n//     return () => clearInterval(interval);\n//   }, [isActive, seconds]);\n//   return (\n//     <div className=\"app\">\n//       <div className=\"time\">{seconds}s</div>\n//     </div>\n//   );\n// };\n\nexport default Count;\n"]},"metadata":{},"sourceType":"module"}